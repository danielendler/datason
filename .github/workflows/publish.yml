name: 📦 Build & Publish to PyPI

on:
  # Trigger on new releases
  release:
    types: [published]

  # Allow manual trigger
  workflow_dispatch:
    inputs:
      test_pypi:
        description: 'Publish to TestPyPI instead of PyPI'
        required: false
        default: false
        type: boolean

# Set explicit permissions for security
permissions:
  contents: read  # Needed to read repository contents
  id-token: write  # Needed for PyPI trusted publishing
  actions: read  # Needed to access artifacts

jobs:
  build:
    name: 🏗️ Build Package
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v5

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: 📦 Install Build Tools
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine

    - name: 🔍 Verify Package Metadata
      run: |
        python -c "
        import tomllib
        with open('pyproject.toml', 'rb') as f:
            config = tomllib.load(f)
        print(f'Package: {config[\"project\"][\"name\"]}')
        print(f'Version: {config[\"project\"][\"version\"]}')
        print(f'Description: {config[\"project\"][\"description\"]}')
        "

    - name: 🏗️ Build Package
      run: |
        # Clean any previous builds
        rm -rf dist/ build/ *.egg-info/

        # Build both wheel and source distribution
        python -m build

        # List what we built
        ls -la dist/

    - name: ✅ Verify Build
      run: |
        # Check package contents
        python -m zipfile -l dist/*.whl

        # Verify package can be installed
        python -m pip install dist/*.whl
        python -c "import datason; print(f'✅ Package import successful: {datason.__version__ if hasattr(datason, \"__version__\") else \"unknown\"}')"

    - name: 🔍 Run Package Checks
      run: |
        # Check distribution packages
        python -m twine check dist/*

    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/
        retention-days: 7

  test-pypi:
    name: 🧪 Publish to TestPyPI
    needs: build
    runs-on: ubuntu-latest
    if: github.event.inputs.test_pypi == 'true'
    environment: pypi  # Use the pypi environment for trusted publishing
    permissions:
      id-token: write  # For trusted publishing

    steps:
    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/

    - name: 🧪 Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        # Uses OIDC trusted publishing - no API tokens needed!

    - name: ✅ Verify TestPyPI Upload
      run: |
        echo "✅ Package published to TestPyPI!"
        echo "🔗 View at: https://test.pypi.org/project/datason/"
        echo "📦 Test install: pip install --index-url https://test.pypi.org/simple/ datason"

  pypi:
    name: 🚀 Publish to PyPI
    needs: build
    runs-on: ubuntu-latest
    if: (github.event_name == 'release' && github.event.action == 'published') || (github.event_name == 'workflow_dispatch' && github.event.inputs.test_pypi != 'true')
    environment: pypi  # Use the pypi environment for trusted publishing
    permissions:
      id-token: write  # For trusted publishing

    steps:
    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/

    - name: 🚀 Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      # Uses OIDC trusted publishing - no API tokens needed!

    - name: ✅ Verify PyPI Upload
      run: |
        echo "🎉 Package published to PyPI!"
        echo "🔗 View at: https://pypi.org/project/datason/"
        echo "📦 Install: pip install datason"

    - name: 📢 Create Release Summary
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        ## 🎉 Release Published Successfully!

        **Package**: `datason`
        **Version**: `${{ github.event.release.tag_name }}`
        **PyPI**: https://pypi.org/project/datason/

        ### 📦 Installation
        ```bash
        pip install datason
        ```

        ### 🔗 Links
        - 📖 [Documentation](https://datason.readthedocs.io)
        - 🐛 [Report Issues](https://github.com/${{ github.repository }}/issues)
        - 💬 [Discussions](https://github.com/${{ github.repository }}/discussions)
        EOF
