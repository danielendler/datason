name: 🚀 Bump Major Version & Release

on:
  workflow_dispatch:
    inputs:
      target_version:
        description: 'Target version (e.g., 1.0.0) - leave empty for auto-increment'
        required: false
        type: string
        default: ''
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string
        default: 'Major release with breaking changes and new features'
      force_release:
        description: 'Force release even if no code changes detected'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  id-token: write
  actions: write

jobs:
  bump-and-release:
    runs-on: ubuntu-latest
    environment: pypi

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests toml packaging

    - name: 🔍 Get Current Version
      id: current_version
      run: |
        # Get version from pyproject.toml
        PROJECT_VERSION=$(python -c "
        import toml
        with open('pyproject.toml', 'r') as f:
            data = toml.load(f)
        print(data['project']['version'])
        ")

        # Try to get version from PyPI first
        PYPI_VERSION=$(python -c "
        import requests
        try:
            response = requests.get('https://pypi.org/pypi/datason/json', timeout=10)
            if response.status_code == 200:
                data = response.json()
                print(data['info']['version'])
            else:
                print('NOT_FOUND')
        except:
            print('NOT_FOUND')
        " 2>/dev/null)

        # Get latest git tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
        GIT_VERSION=$(echo "$LATEST_TAG" | sed 's/^v//')

        echo "project=$PROJECT_VERSION" >> $GITHUB_OUTPUT
        echo "pypi=$PYPI_VERSION" >> $GITHUB_OUTPUT
        echo "git=$GIT_VERSION" >> $GITHUB_OUTPUT
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

        echo "📋 Project file version: $PROJECT_VERSION"
        echo "📋 PyPI version: $PYPI_VERSION"
        echo "📋 Git tag version: $GIT_VERSION"
        echo "📋 Latest tag: $LATEST_TAG"

        # Determine current version with priority: PyPI > Git > Project
        if [ "$PYPI_VERSION" != "NOT_FOUND" ]; then
          CURRENT_VERSION="$PYPI_VERSION"
          SOURCE="PyPI"
        elif [ "$LATEST_TAG" != "none" ]; then
          CURRENT_VERSION="$GIT_VERSION"
          SOURCE="Git tag"
        else
          CURRENT_VERSION="$PROJECT_VERSION"
          SOURCE="Project file"
        fi

        echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "source=$SOURCE" >> $GITHUB_OUTPUT
        echo "🎯 Using version: $CURRENT_VERSION (from $SOURCE)"

    - name: 🎯 Validate Target Version
      if: inputs.target_version != ''
      id: validate_target
      run: |
        TARGET="${{ inputs.target_version }}"
        CURRENT="${{ steps.current_version.outputs.current }}"

        echo "🎯 Target version: $TARGET"
        echo "📋 Current version: $CURRENT"

        # Validate version format and compare versions
        python -c "
        import sys
        from packaging import version

        target = '$TARGET'
        current = '$CURRENT'

        # Validate format
        try:
            target_parsed = version.parse(target)
            current_parsed = version.parse(current)
        except Exception as e:
            print(f'❌ Invalid version format: {e}')
            sys.exit(1)

        # Check if target is higher than current
        if target_parsed <= current_parsed:
            print(f'❌ Target version ({target}) must be higher than current version ({current})')
            sys.exit(1)

        # Check if it's a proper major bump (major.minor.patch format)
        target_parts = str(target_parsed).split('.')
        current_parts = str(current_parsed).split('.')

        if len(target_parts) < 3 or len(current_parts) < 3:
            print(f'❌ Version must be in major.minor.patch format')
            sys.exit(1)

        target_major, target_minor, target_patch = map(int, target_parts[:3])
        current_major, current_minor, current_patch = map(int, current_parts[:3])

        # For major bump: major should be higher, minor and patch should typically be 0
        if target_major <= current_major:
            print(f'❌ For major bump, major version should be higher (current: {current_major}, target: {target_major})')
            sys.exit(1)

        if target_minor != 0 or target_patch != 0:
            print(f'⚠️ For major bump, minor and patch versions should typically be 0, got {target_minor}.{target_patch}')
            print('Proceeding anyway as this might be intentional...')

        print(f'✅ Target version {target} is valid for major bump')
        "

        echo "valid=true" >> $GITHUB_OUTPUT
        echo "✅ Target version validation passed"

    - name: 🔎 Check Version Alignment
      id: alignment_check
      run: |
        PROJECT="${{ steps.current_version.outputs.project }}"
        PYPI="${{ steps.current_version.outputs.pypi }}"
        GIT="${{ steps.current_version.outputs.git }}"

        # Check if all versions are aligned
        MISALIGNED=false
        WARNINGS=""

        if [ "$PYPI" != "NOT_FOUND" ] && [ "$PROJECT" != "$PYPI" ]; then
          MISALIGNED=true
          WARNINGS="$WARNINGS\n⚠️ Project file ($PROJECT) differs from PyPI ($PYPI)"
        fi

        if [ "$GIT" != "none" ] && [ "$GIT" != "" ] && [ "$PROJECT" != "$GIT" ]; then
          MISALIGNED=true
          WARNINGS="$WARNINGS\n⚠️ Project file ($PROJECT) differs from Git tag ($GIT)"
        fi

        if [ "$PYPI" != "NOT_FOUND" ] && [ "$GIT" != "none" ] && [ "$GIT" != "" ] && [ "$PYPI" != "$GIT" ]; then
          MISALIGNED=true
          WARNINGS="$WARNINGS\n⚠️ PyPI ($PYPI) differs from Git tag ($GIT)"
        fi

        echo "misaligned=$MISALIGNED" >> $GITHUB_OUTPUT
        echo "warnings<<EOF" >> $GITHUB_OUTPUT
        echo -e "$WARNINGS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        if [ "$MISALIGNED" = "true" ]; then
          echo "🚨 Version misalignment detected!"
          echo -e "$WARNINGS"
          echo "Consider aligning versions before proceeding with release."
        else
          echo "✅ All versions are aligned"
        fi

    - name: 🔎 Check for Code Changes
      id: changes_check
      run: |
        LATEST_TAG="${{ steps.current_version.outputs.latest_tag }}"
        FORCE_RELEASE="${{ inputs.force_release }}"

        # Get the commit hash that the latest tag points to
        if [ "$LATEST_TAG" != "none" ] && git rev-parse --verify "$LATEST_TAG" >/dev/null 2>&1; then
          TAG_COMMIT=$(git rev-parse "$LATEST_TAG")
          CURRENT_COMMIT=$(git rev-parse HEAD)

          echo "🏷️ Tag $LATEST_TAG points to: $TAG_COMMIT"
          echo "📍 Current HEAD commit: $CURRENT_COMMIT"

          if [ "$TAG_COMMIT" = "$CURRENT_COMMIT" ] && [ "$FORCE_RELEASE" = "false" ]; then
            echo "⚠️ No code changes since last release ($LATEST_TAG)"
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "skip_reason=No code changes since $LATEST_TAG" >> $GITHUB_OUTPUT
          else
            # Check how many commits ahead we are
            COMMITS_AHEAD=$(git rev-list --count "$TAG_COMMIT..HEAD" 2>/dev/null || echo "unknown")
            if [ "$FORCE_RELEASE" = "true" ] && [ "$COMMITS_AHEAD" = "0" ]; then
              echo "🔄 Forcing release despite no code changes"
              COMMITS_AHEAD="0 (forced)"
            fi
            echo "✅ Found $COMMITS_AHEAD commits since $LATEST_TAG"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "commits_ahead=$COMMITS_AHEAD" >> $GITHUB_OUTPUT
          fi
        else
          echo "✅ No previous tag found, proceeding with release"
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "commits_ahead=unknown" >> $GITHUB_OUTPUT
        fi

    - name: ⏭️ Skip Release (No Changes)
      if: steps.changes_check.outputs.has_changes == 'false'
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        ## ⏭️ Major Release Skipped

        **Reason**: ${{ steps.changes_check.outputs.skip_reason }}

        **Current version**: `${{ steps.current_version.outputs.current }}`
        **Latest tag**: `${{ steps.current_version.outputs.latest_tag }}`

        ### 🔍 Version Status
        - **Project file**: `${{ steps.current_version.outputs.project }}`
        - **PyPI**: `${{ steps.current_version.outputs.pypi }}`
        - **Git tag**: `${{ steps.current_version.outputs.git }}`
        - **Using**: `${{ steps.current_version.outputs.current }}` (from ${{ steps.current_version.outputs.source }})

        ${{ steps.alignment_check.outputs.misaligned == 'true' && '### ⚠️ Version Alignment Warnings' || '' }}
        ${{ steps.alignment_check.outputs.warnings }}

        ### 💡 Why was this skipped?
        The current code is identical to what was already released.
        You can either:
        - Make some code changes first, then run the bump workflow again
        - Use the "Force release" option to release anyway

        ### 🔗 Quick Links
        - Current release: https://github.com/${{ github.repository }}/releases/tag/${{ steps.current_version.outputs.latest_tag }}
        - PyPI: https://pypi.org/project/datason/
        EOF

        echo "⏭️ Skipping release - no code changes detected"
        exit 0

    - name: ➕ Calculate Next Version
      if: steps.changes_check.outputs.has_changes == 'true'
      id: next_version
      run: |
        TARGET_VERSION="${{ inputs.target_version }}"
        CURRENT="${{ steps.current_version.outputs.current }}"

        if [ -n "$TARGET_VERSION" ]; then
          # Use target version
          NEXT_VERSION="$TARGET_VERSION"
          echo "🎯 Using target version: $NEXT_VERSION"
        else
          # Auto-increment major version
          IFS='.' read -r major minor patch <<< "$CURRENT"
          next_major=$((major + 1))
          NEXT_VERSION="${next_major}.0.0"
          echo "🔢 Auto-incremented to: $NEXT_VERSION"
        fi

        echo "next=$NEXT_VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$NEXT_VERSION" >> $GITHUB_OUTPUT
        echo "🎯 Next version: $NEXT_VERSION"
        echo "📈 Changes: ${{ steps.changes_check.outputs.commits_ahead }} commits since last release"

    - name: 🔎 Check for Existing Tag
      id: tag_check
      run: |
        TAG_NAME="v${{ steps.next_version.outputs.next }}"

        # Check if tag exists locally
        if git tag -l | grep -q "^${TAG_NAME}$"; then
          echo "exists_local=true" >> $GITHUB_OUTPUT
          echo "⚠️ Tag $TAG_NAME exists locally"
        else
          echo "exists_local=false" >> $GITHUB_OUTPUT
          echo "✅ Tag $TAG_NAME does not exist locally"
        fi

        # Check if tag exists on remote
        if git ls-remote --tags origin | grep -q "refs/tags/${TAG_NAME}$"; then
          echo "exists_remote=true" >> $GITHUB_OUTPUT
          echo "⚠️ Tag $TAG_NAME exists on remote"
        else
          echo "exists_remote=false" >> $GITHUB_OUTPUT
          echo "✅ Tag $TAG_NAME does not exist on remote"
        fi

        # Determine if we should skip
        if [ "${{ steps.tag_check.outputs.exists_remote }}" = "true" ]; then
          echo "should_skip=true" >> $GITHUB_OUTPUT
          echo "skip_reason=Tag $TAG_NAME already exists on remote" >> $GITHUB_OUTPUT
        else
          echo "should_skip=false" >> $GITHUB_OUTPUT
        fi

    - name: ❌ Skip Release (Tag Exists)
      if: steps.tag_check.outputs.should_skip == 'true'
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        ## ❌ Major Release Failed

        **Reason**: ${{ steps.tag_check.outputs.skip_reason }}

        **Attempted version**: `${{ steps.next_version.outputs.next }}`
        **Tag**: `${{ steps.next_version.outputs.tag }}`

        ### 💡 What to do?
        - Choose a different target version using the `target_version` input
        - Or check if this version was already released

        ### 🔗 Quick Links
        - Existing release: https://github.com/${{ github.repository }}/releases/tag/${{ steps.next_version.outputs.tag }}
        - All releases: https://github.com/${{ github.repository }}/releases
        EOF

        echo "❌ Aborting release - tag already exists"
        exit 1

    - name: ✏️ Update Project Files
      if: steps.changes_check.outputs.has_changes == 'true' && steps.tag_check.outputs.should_skip == 'false'
      run: |
        NEW_VERSION="${{ steps.next_version.outputs.next }}"

        # Update pyproject.toml
        python -c "
        import toml

        # Read current pyproject.toml
        with open('pyproject.toml', 'r') as f:
            data = toml.load(f)

        # Update version
        data['project']['version'] = '$NEW_VERSION'

        # Write back
        with open('pyproject.toml', 'w') as f:
            toml.dump(data, f)

        print('✅ Updated pyproject.toml version to $NEW_VERSION')
        "

        # Check if __init__.py has version string and update it
        if grep -q "__version__" datason/__init__.py; then
          sed -i "s/__version__ = .*/__version__ = \"$NEW_VERSION\"/" datason/__init__.py
          echo "✅ Updated datason/__init__.py version to $NEW_VERSION"
        fi

        # Show what files were changed
        echo "📋 Files updated:"
        git diff --name-only

    - name: 📝 Commit Version Bump
      if: steps.changes_check.outputs.has_changes == 'true' && steps.tag_check.outputs.should_skip == 'false'
      run: |
        NEW_VERSION="${{ steps.next_version.outputs.next }}"
        TAG_NAME="${{ steps.next_version.outputs.tag }}"

        # Configure git
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"

        # Add and commit changes
        git add pyproject.toml datason/__init__.py
        git commit -m "🚀 Bump version to $NEW_VERSION [skip ci]" || echo "No changes to commit"

        # Create and push tag
        echo "✅ Creating tag $TAG_NAME"
        git tag -a "$TAG_NAME" -m "Release $NEW_VERSION"

        # Push commit and tag
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
        git push origin ${{ github.ref_name }}
        git push origin "$TAG_NAME"

        echo "✅ Pushed commit and tag $TAG_NAME to GitHub"

    - name: 🏗️ Build Package
      if: steps.changes_check.outputs.has_changes == 'true' && steps.tag_check.outputs.should_skip == 'false'
      run: |
        python -m pip install build
        python -m build
        ls -la dist/

    - name: 🎉 Create GitHub Release
      if: steps.changes_check.outputs.has_changes == 'true' && steps.tag_check.outputs.should_skip == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          const { repo, owner } = context.repo;
          const tagName = '${{ steps.next_version.outputs.tag }}';
          const version = '${{ steps.next_version.outputs.next }}';
          const releaseNotes = `${{ inputs.release_notes }}`;
          const commitsAhead = '${{ steps.changes_check.outputs.commits_ahead }}';

          // Generate release body
          let body = releaseNotes;
          if (commitsAhead && commitsAhead !== 'unknown' && commitsAhead !== '0 (forced)') {
            body += `\n\n---\n\n**Changes**: ${commitsAhead} commits since last release`;
          }

          body += `\n\n### 📦 Installation\n\`\`\`bash\npip install datason==${version}\n\`\`\``;
          body += `\n\n### 🔗 Links\n- [PyPI](https://pypi.org/project/datason/${version}/)\n- [Documentation](https://datason.readthedocs.io)\n- [Changelog](https://github.com/${owner}/${repo}/blob/main/CHANGELOG.md)`;

          try {
            const release = await github.rest.repos.createRelease({
              owner,
              repo,
              tag_name: tagName,
              name: `Release ${version}`,
              body: body,
              draft: false,
              prerelease: false
            });

            console.log(`✅ Created GitHub release: ${release.data.html_url}`);
          } catch (error) {
            console.error('❌ Failed to create GitHub release:', error.message);
            throw error;
          }

    - name: 🚀 Trigger PyPI Release Workflow
      if: steps.changes_check.outputs.has_changes == 'true' && steps.tag_check.outputs.should_skip == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          try {
            // Trigger the existing release workflow that's already configured for PyPI
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'release.yml',
              ref: 'main',
              inputs: {
                version: '${{ steps.next_version.outputs.tag }}',
                prerelease: 'false'
              }
            });

            console.log('✅ Triggered PyPI release workflow for ${{ steps.next_version.outputs.tag }}');
          } catch (error) {
            console.error('⚠️ Failed to trigger PyPI release workflow:', error.message);
            console.log('You may need to manually trigger the release workflow');
          }

    - name: ✅ Release Summary
      if: steps.changes_check.outputs.has_changes == 'true' && steps.tag_check.outputs.should_skip == 'false'
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        ## 🚀 Major Release Complete!

        **Previous version**: `${{ steps.current_version.outputs.current }}`
        **New version**: `${{ steps.next_version.outputs.next }}`
        **Tag created**: `${{ steps.next_version.outputs.tag }}`
        **Commits included**: ${{ steps.changes_check.outputs.commits_ahead }}

        ${{ inputs.target_version != '' && format('**Target version**: Used custom target `{0}` ✨', inputs.target_version) || '**Version increment**: Auto-incremented major version 🔢' }}

        ### 🔍 Version Sources (Pre-Bump)
        - **Project file**: `${{ steps.current_version.outputs.project }}`
        - **PyPI**: `${{ steps.current_version.outputs.pypi }}`
        - **Git tag**: `${{ steps.current_version.outputs.git }}`
        - **Used**: `${{ steps.current_version.outputs.current }}` (from ${{ steps.current_version.outputs.source }})

        ${{ steps.alignment_check.outputs.misaligned == 'true' && '### ⚠️ Version Alignment Warnings (Pre-Bump)' || '' }}
        ${{ steps.alignment_check.outputs.warnings }}

        ### 🎯 What was done
        - ✅ Updated `pyproject.toml` version
        - ✅ Updated `datason/__init__.py` version (if present)
        - ✅ Created and pushed Git tag `${{ steps.next_version.outputs.tag }}`
        - ✅ Created GitHub release
        - ✅ Triggered PyPI release workflow

        ### 🔄 Next Steps
        The PyPI release workflow should handle:
        - Building and publishing to PyPI
        - Final release notifications

        **Monitor**: Check the Actions tab for the PyPI release workflow progress

        ### 🔗 Quick Links
        - [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/${{ steps.next_version.outputs.tag }})
        - [PyPI](https://pypi.org/project/datason/) (will update shortly)
        - [Documentation](https://datason.readthedocs.io)
        EOF
