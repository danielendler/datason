name: ü§ñ Auto-merge

on:
  pull_request_target:  # Use pull_request_target for Dependabot PRs (has write permissions)
    types: [labeled, unlabeled, synchronize, opened, edited, ready_for_review, reopened]
  pull_request_review:
    types: [submitted]

# Add explicit permissions for auto-merge workflows
permissions:
  contents: read
  pull-requests: write
  issues: write
  repository-projects: read

jobs:
  auto-approve:
    runs-on: ubuntu-latest

    # üéØ ONLY runs for Dependabot PRs - these get full automation
    if: github.actor == 'dependabot[bot]'

    # Add explicit permissions for auto-approval (fixed permissions issue)
    permissions:
      contents: read
      pull-requests: write

    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v5

    - name: ü§ñ Auto-approve Dependabot PRs (Updated to v4 with proper permissions)
      uses: hmarr/auto-approve-action@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: üè∑Ô∏è Label Dependabot PRs for auto-merge
      uses: actions/github-script@v7
      with:
        script: |
          const prTitle = context.payload.pull_request.title.toLowerCase();
          const labels = [];

          // Categorize Dependabot PRs
          if (prTitle.includes('pytest') || prTitle.includes('ruff') || prTitle.includes('mypy') || prTitle.includes('bandit')) {
            labels.push('dependencies:dev');
          } else if (prTitle.includes('pandas') || prTitle.includes('numpy') || prTitle.includes('torch') || prTitle.includes('tensorflow')) {
            labels.push('dependencies:optional');
          } else if (prTitle.includes('actions/') || prTitle.includes('github')) {
            labels.push('dependencies:github-actions');
          } else {
            labels.push('dependencies:core');
          }

          // Add auto-merge label for safe updates only
          if (prTitle.includes('patch') || prTitle.includes('minor') || labels.includes('dependencies:dev') || labels.includes('dependencies:github-actions')) {
            labels.push('auto-merge');
          }

          // Apply labels
          if (labels.length > 0) {
            github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              labels: labels
            });
          }

  auto-merge:
    runs-on: ubuntu-latest
    # Run after auto-approve completes (if it ran)
    needs: [auto-approve]
    # Allow this job to run even if auto-approve was skipped (for non-Dependabot PRs)
    if: always() && github.event.pull_request != null && github.event.pull_request.draft == false

    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v5

    # üöÄ PATH A: Dependabot PRs - FULLY AUTOMATIC (no approval needed)
    - name: ü§ñ Auto-merge Dependabot PRs (Fast path - FULLY AUTOMATIC)
      uses: fastify/github-action-merge-dependabot@v3
      if: |
        github.actor == 'dependabot[bot]' &&
        (
          contains(github.event.pull_request.title, 'Bump') ||
          contains(github.event.pull_request.title, 'Update')
        )
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        merge-method: squash
        target: major
        approve-only: false

    # üîß PATH B: Manual PRs with auto-merge label - REQUIRES APPROVAL FIRST
    - name: ü§ñ Auto-merge labeled PRs (Manual checks - REQUIRES HUMAN APPROVAL)
      if: contains(github.event.pull_request.labels.*.name, 'auto-merge') && github.actor != 'dependabot[bot]'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "üîç Checking if PR is ready for auto-merge..."
        echo "‚ö†Ô∏è  NOTE: This requires human approval first! Add 'auto-merge' label after approving."

        # Wait a moment for CI to start if it hasn't already
        sleep 10

        # Check current status without waiting indefinitely
        echo "üìä Current check status:"
        gh pr view ${{ github.event.pull_request.number }} --json statusCheckRollup --jq '.statusCheckRollup[]'

        # Only wait for actual CI checks (not auto-merge workflow itself)
        echo "‚è≥ Waiting for CI checks to complete (max 10 minutes)..."
        timeout 600 gh pr checks ${{ github.event.pull_request.number }} --watch --interval 30 || {
          echo "‚ö†Ô∏è Timeout waiting for checks. Checking current status..."
        }

        # Final check - only merge if required checks passed
        if gh pr checks ${{ github.event.pull_request.number }} --required 2>/dev/null; then
          echo "‚úÖ All required checks passed. Auto-merging..."
          gh pr merge ${{ github.event.pull_request.number }} --squash --auto
        else
          echo "‚ùå Some required checks failed or are still pending. Skipping auto-merge."
          gh pr view ${{ github.event.pull_request.number }} --json statusCheckRollup --jq '.statusCheckRollup[] | select(.state != "SUCCESS")'
        fi
